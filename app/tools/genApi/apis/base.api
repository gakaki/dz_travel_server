//该Base类会在实际中作为所有api的基类
class Base{
    prop client _app:App
    prop action:string
    prop server uid:string
    prop server _sid:string
    prop server ctx:Context
    prop client reqFields:string[]
    prop server resFields:string[]

    func client get app() {
        if (!this._app) {
            this._app = getApp();
        }
        return this._app;
    }

    func client fetch() {
        return new Promise((resolve, reject) => {
            wx.request({
                url: Base.SRV,
                data: this.reqData,
                success: res => {
                  this.parse(res.data.data);
                  this.code = res.data.code;
                  resolve(this)
                },
                fail: err => {
                    this.error(err)
                    reject(err);
                }
              })
        })
    }

    func server submit() {
        let tmp = {};
        tmp.action = this.action;
        this.resFields.forEach(k => {
           tmp[k] = this[k]
        });

        this.ctx.body = tmp;
    }

    func client get reqData() {
        let tmp = {};
        let sid = Base.GetSID();
        if (sid)
            tmp._sid = sid;
        let uid = Base.GetUID();
        if (uid)
            tmp.uid = uid;
        this.reqFields.forEach(k => {
            tmp[k] = this[k]
        });
        tmp.appName = Base.APP_NAME;
        tmp.action = this.action;
        return tmp;
    }

    func parse(data) {
        Object.assign(this, data);
    }

    func client error(err) {

    }

    func client static GetUID() {
        if (!Base.UID) {
            Base.UID = wx.getStorageSync('uid');
        }
        return Base.UID;
    }

    func client static GetSID() {
        if (!Base.SID) {
            Base.SID = wx.getStorageSync('sid');
        }
        return Base.SID;
    }

    func client static Start(appName, url) {
        return new Promise(resolve => {
            let app = getApp();
            if (app.globalData.userInfo) {
                //已经有用户数据
                resolve();
            }
            else {
                this.DoStart(appName, url).then(resolve);
            }
        });
    }

    func client static DoStart(appName, url) {
        //定义一些静态变量
        this.SID = '';
        this.UID = '';
        this.APP_NAME = appName;
        this.SRV = url || 'https://h5.ddz2018.com/';//https服务器链接
        this.AUTHED = false;

        //start
        return new Promise(resolve => {
            wx.checkSession({
                success: () => {
                    if (Base.GetSID() || Base.GetUID()){
                        this.AUTHED = true;
                        this.UserLogin(resolve)
                    }
                    else {
                        wx.login({
                            success: res => {
                                this.AUTHED = false;
                                this.UserAuth(res.code, resolve);
                            }
                        })
                    }
                },
                fail: res => {
                    wx.login({
                        success: res => {
                            this.AUTHED = false;
                            this.UserAuth(res.code, resolve);
                        }
                    })
                }
            });
        });

    }

    func client static UserAuth(code, suc) {
        let req = new Base();
        req.action = 'weChat.auth';
        req.reqFields = ['payload'];

        //set data
        req.payload = {code};
        req.fetch().then( res => {
            this.UID = res.uid;
            wx.setStorageSync('uid', this.UID);
            this.UserLogin(suc);
        });
    }

    func client static UserLogin(suc) {
        let req = new Base();
        req.action = 'user.login';
        req.reqFields = [ 'info'];

        //wx login
        wx.getUserInfo({
            success: info =>{
                let app = getApp();

                //fetch srv
                req.info = info.userInfo;
                req.fetch().then(()=>{
                    this.AUTHED = true;
                    if (req.code != 0) {
                        req.error(req.code);
                    }
                    else {
                        app.globalData.userInfo = req.info;
                        this.SID = req.sid;
                        wx.setStorageSync('sid', this.SID);
                        suc(req);
                    }
                });
            }
        });

    }

    func client static InitWs(wss) {
        //初始化websocket
        this.WSS = wss = wss || `wss://h5.ddz2018.com/${this.APP_NAME}`;//websocket服务器链接
        this.IO = require('./libs/io.js')(wss + `?_sid=${this.SID}&appName=${this.APP_NAME}`);

        return new Promise(resolve => {
            this.IO.on('connect', () => {
                console.log('socket connected')
                resolve();
            });

            this.IO.on('disconnect', msg => {
                console.log('socket disconnected', msg);
            });

            this.IO.on('disconnecting', () => {
                console.log('socket disconnecting');
            });

            this.IO.on('error', () => {
                console.log('socket error');
            });
        });
    }

    func client static WsReceive(action,suc) {
        this.IO.on(action, res => {suc(res)});
    }

    func client static WsSend(action, data) {
        this.IO.emit(action, data);
    }

    func client static WsClose(...actions) {
        actions.forEach( a=> {
            this.IO.removeAllListeners(a);
        });
    }
}