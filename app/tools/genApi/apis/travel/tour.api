//游玩界面相关的api数据

class QuestReport {
    //景点数量
    prop spotCount:number
    //触发的事件数量
    prop questCount:number
    //明信片收集数量
    prop postcardCount:number
}

class RouterSpot {
    //是否经过
    prop tracked:boolean
    //经过的顺序
    prop index:number
    //预计达到时间戳
    prop arriveStamp:number
}
class Spot extends RouterSpot{
    //城市id
    prop cid:number
    //景点配置表id
    prop id:number
    prop x:number
    prop y:number
    //景点配置表描述
    prop name:string
    //建筑图标
    prop building:string[]
}

class TourTask {
    prop spot:number[]      // 3/6 景点完成度 一共6已完成3
    prop tour:number[]      // 0/2 观光完成度 一共2已完成2
    prop parterTour:number[]//0/2 队友观光完成度 一共2已完成2(双人模式下)
    prop photo:number[]     // 0/2 拍照完成度 一共2已完成2
    prop parterPhoto:number[]     // 0/2 队友拍照完成度 一共2已完成2(双人模式下)
}

class Partener {
    prop nickName:string//队员名
    prop gender:number//性别
    prop img:string//头像地址
    prop isInviter:boolean//是否是邀请者
}
// 查询用户是否需要新手引导
api CheckGuide {
    //是否玩过
    output hasPlay:boolean
}

// 标记新手引导结束
api FinishGuide {
}



//进入城市的经典页面  用户开始该城市的旅游
api TourIndexInfo{
    //城市id
    require cid:number

    output weather:number
    //该城市的spot景点列表
    output spots:Spot[]
    //任务完成度信息
    output task:TourTask
    //起点
    output startPos:object
    //其他玩家头像，为图片url数组
    output others:string[]
    output display: number //人物的表现形式
    output startTime: number //开始时间
    output partener:Partener//组队者信息,非组队模式下传空
}

//取消组队
api CancelParten {


}

class Postcard {
    prop id:string
    prop pattern:string
    prop picture:string
    prop type:string
}

// 到达景点拍照按钮
api Photography {
    //城市id
    require cid:number
    //景点id
    require spotId:number
    //返回明信片
    output postcard:Postcard
    output freePhoto:number
}



class Quest {
    prop time:number
    prop id:string
    prop type:string
    prop picture:string
    prop describe:string
    prop gold_used:number
    prop rewards:KV[]
    prop question:string
    prop answers:string[]
    prop rewardCommet:string
}

// 进入景点
class EnterSpot {
    prop id:string
    prop scenicspot:string
    prop weather:number
    prop freePhoto:number//初始为2，买了增加3次拍照的就加3，买了可以无限拍照的变为-1  （均本城本次游玩有效）
    prop freeSight:number
    prop picture:string
    prop description:string
}

// 进入景点
api ReqEnterspot {
    //景点id
    require spotId:number
    //城市id
    require cid:number
    //景点数据
    output spot:EnterSpot
    //观光事件列表
    output events:string[]
    output goldNum:number//剩余金币数
}


// 到达景点观光
api SpotTour {
    //城市id
    require cid:number
    //景点id
    require spotId:number
    output event:string//产生的新事件
    //随机事件会获得的东西不同
    output  freeSight:number
    output goldNum:number//剩余金币数
}

// 随机事件弹出框 回答答案
api AnswerQuest{
    require id:number
    require answer:string

    output correct:boolean
    //更新后的用户信息
    output userInfo:UserInfo
    //奖励物品
    output rewards:KV[]
}
//点开显示随机事件
api EventShow {
    require cid:number
    //列表总长多少
    output total:number
    //当前第几个从1开始
    output current:number
    //事件
    output quest:Quest
    //更新后的用户信息
    output userInfo: UserInfo
}

//玩家完成该城市的景点的具体报告
api ShowQuestReport {
   //返回报告信息
   output questReport:QuestReport
}

//用户结束该城市旅游时，会给出用户的效率评分，并根据评分给予金币奖励。
api LeaveTour
{
    //返回个人的金币和积分 在userinfo里
    output userinfo:UserInfo
    //该城市的整体效率评分 效率评分 CityPer.cityEf
    output cityPer:CityPer
}

//租用道具
api RentProp {
    require rentId:number  //装备id
}
//已租用的道具
api RentedProp {
    output rentItems:KV[]//已租用的所有道具。
}

class Postcard {
    prop ptid:number //明信片id
    prop picture:string //明信片图片
    prop price:string //明信片价格
}

//当前可购买的明信片
api BuyPostcatdList {
    require cid:number //城市id
    output ptList:Postcard[] //可购买明信片列表
}

//购买明信片
api BuyPostcatd {
    require ptid:number //明信片id
    output goldNum:number //剩余金钱
}

//设置/修改路线，后端判断是z否第一次，非第一次且非续接路线则扣钱
api SetRouter {
    require cid:string
    require line:array//景点id数组,每次传的都市完整的路线（包含已走过的）

    //设置后景点数组
    output spots:RouterSpot[]//不包括起点
    output startTime: number //起点开始时间

}
//装备修改路线，组队模式下，如果双方同时触发此api，则稍晚的一方收到错误码,提示‘好友正在修改路线’
api ModifyRouter {
    //当前景点状态数组
    output spots:RouterSpot[]//不包括起点
    //设置路线后剩余金币
    output goldNum:number
}
//最新景点数组
api FreshSpots {
    //最新景点数组
    output spots:RouterSpot[]
    output display: number //人物的表现形式
}

//游玩界面轮询
api PlayLoop {
    output newEvent:boolean  //是否有新事件
    output freshSpots:boolean //是否要刷新景点状态列表，一些事件、装备，双人模式下一方修改了路线等，会影响景点的到达时间
    output spotsTracked:number//有几个到达了
    output spotsAllTraced:boolean//是否已经把地图上所有的景点都走过了
    output spotsPlaned:boolean//路线是否已经规划完成，双人模式下，被邀请方规划路线完成后，通过此标记通知邀请方
}

